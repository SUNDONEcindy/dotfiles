# SSH Config File


## Generating keys: ##
    # Max security, not compatible with CentOS 7/ubuntu 12.04:
        # `ssh-keygen -t ed25519 -a 60 -C "jeff@jeffwidman.com macbook air"`
    # Max compatibility:
        # `ssh-keygen -t rsa -b 4096 -C "jeff@jeffwidman.com macbook air"`

    # SSH key-gen options:
    # -t specifies the type; ed25519 is better than RSA, but not widely supported. RSA is preferred over ECDSA due to suspected NSA tampering.
    # -a specifies the rounds for bcrypt when saving the private key using the new OpenSSH format
    # -C comment
    # RSA specific options:
        # -b specifies the bits. This option is ignored when generating ed25519 keys because it's not applicable.
        # -o specifies saving the private key locally using a new OpenSSH format that uses bcrypt.
            # For ed25519 keys, this is always turned on and don't need to specify it.
            # While Cyberduck supports this (due to supporting ed25519 key format), some ftp clients don't support this yet.
            # For them you can omit this flag and the private key will be saved using the older PEM format.


## Example using ProxyJump to access a DB server via a jumpbox ##
#Host jbox
    # HostName can be either domain name or IP address
    #HostName jumpbox.test.com
    #User jeff
    #Port 1093

    #Host rc-db
        #Hostname db
        #User jeff
        #ProxyJump jbox
        # Create tunnel from local port 5433 to PostgreSQL (port 5432)
        #LocalForward 5433 localhost:5432

#Host *+*
    # Split `ssh jumphost+targethost` into `ssh jumphost -W targethost:%p`
    # Primarily useful when the targethost is a generic name that refers to
    # different servers depending on the jumphost. For example, redis01 is
    # a different box in datacenter1 vs datacenter2. Implementing this requires
    # ProxyCommand instead of ProxyJump because ProxyJump doesn't support
    # splitting the hostname into parts.
    #ProxyCommand ssh $(echo %h | sed 's/+[^+]*$//;s/\([^+%%]*\)%%\([^+]*\)$/\2 -l \1/;s/:/ -p /') -W $(echo %h:%p | sed 's/^.*+//;/:/!s/$/ /')


Host *
    # Create control socket so multiple ssh/scp/sftp sessions share one connection
    # WARNING: This control socket cannot be stored in the same place on macOS and docker
    # When using macOS, store the socket in `~/.ssh/` because `/dev/shm` does not exist
    # ControlPath ~/.ssh/master-%r@%h:%p
    # # When using docker, store the socket in shared memory (`/dev/shm`)
    # # because overlayfs does not play nice with unix sockets
    # #ControlPath /dev/shm/master-%r@%h:%p
    #
    # Default to connecting via the master connection
    ControlMaster auto
    # Don't kill the master until X seconds have passed since last connection
    ControlPersist 600

    # Keep the connection alive by sending null packets every X seconds
    ServerAliveInterval 600
    # Kill connection if X number of ServerAlive messages pass with no response
    ServerAliveCountMax 10

    # Look for passphrases in the macOS keychain.
    # This only works on macOS OpenSSH, so ignore on other platforms
    IgnoreUnknown UseKeychain
    UseKeychain yes

    # X11 forwarding
    ForwardX11Trusted yes
    ForwardAgent yes

    # Increase the log level when debugging. Possible values are: QUIET, FATAL,
    # ERROR, INFO, VERBOSE, DEBUG, DEBUG1, DEBUG2, and DEBUG3. Default: INFO
    #LogLevel DEBUG

# TODO: make this work
# Match host *.mhpcc.hpc.mil
#     # force IPv4 because IPv6 is wonky at MHPCC
#     AddressFamily inet


# MHPCC specific stuff
Host reef reef.mhpcc.hpc.mil
    HostName reef.mhpcc.hpc.mil
    User jdfarin

    # force IPv4 because IPv6 is wonky at MHPCC
    AddressFamily inet
    # use kerberos
    GSSAPIAuthentication yes
    GSSAPIDelegateCredentials yes
    # jupyter notebooks
    # LocalForward 8888 127.0.0.1:8888
    LocalForward 8999 127.0.0.1:8999
    # mlflow
    # LocalForward 5000 127.0.0.1:5000
    # dask
    # LocalForward 8787 127.0.0.1:8787
    # nifi webgui
    # LocalForward 8080 127.0.0.1:8080
    # LocalForward 8123 127.0.0.1:8123

Host pecoc-data1 
    HostName pecoc-data1.cm.cluster
    ProxyJump reef
    User jdfarin
    IdentityFile ~/.ssh/id_ecdsa

Host edge01
     HostName edge01.mhpcc.hpc.mil
     User jdfarin
     AddressFamily inet
     ProxyJump reef
     # nifi webgui
     # LocalForward 8888 127.0.0.1:8888
     # dask
     LocalForward 8787 127.0.0.1:8787

Host edge02
     HostName edge02.mhpcc.hpc.mil
     User jdfarin
     AddressFamily inet
     ProxyJump reef
     # nifi webgui
     LocalForward 8888 127.0.0.1:8888
     # dask
     LocalForward 8787 127.0.0.1:8787


Host dgx2
     HostName dgx2.mhpcc.hpc.mil
     User jdfarin
     AddressFamily inet
     ProxyJump reef
     # nifi webgui
     LocalForward 8080 127.0.0.1:8080
     # dask
     LocalForward 8787 127.0.0.1:8787

Host hokulea
    HostName hokulea.mhpcc.hpc.mil
    User jdfarin
    # force IPv4 because IPv6 is wonky at MHPCC
    AddressFamily inet
    # use kerberos
    GSSAPIAuthentication yes
    GSSAPIDelegateCredentials yes
    # jupyter notebooks
    LocalForward 8889 127.0.0.1:8889
    # mlflow
    LocalForward 5000 127.0.0.1:5000

host mustang
    HostName mustang.afrl.hpc.mil
    User jdfarin
    # force IPv4 because IPv6 is wonky at MHPCC
    AddressFamily inet
    # use kerberos
    GSSAPIAuthentication yes
    GSSAPIDelegateCredentials yes
    # jupyter notebooks
    LocalForward 8889 127.0.0.1:8889
    # mlflow
    LocalForward 5000 127.0.0.1:5000

Host gate2 gate2.mhpcc.hpc.mil
    HostName gate2.mhpcc.hpc.mil
    User jdfarin
    # force IPv4 because IPv6 is wonky at MHPCC
    AddressFamily inet
    # use kerberos
    GSSAPIAuthentication yes
    GSSAPIDelegateCredentials yes

Host portal portal.mhpcc.hpc.mil
    HostName portal.mhpcc.hpc.mil
    User git
    # force IPv4 because IPv6 is wonky at MHPCC
    AddressFamily inet
    IdentityFile ~/.ssh/id_rsa
    ProxyCommand ssh gate2 nc 10.30.30.12 %p
    # TODO: why does ProxyJump timeout when the above ProxyCommand works fine?
    # ProxyJump jdfarin@gate2


Host portala portala.mhpcc.hpc.mil
    HostName portala.mhpcc.hpc.mil
    User git
    # force IPv4 because IPv6 is wonky at MHPCC
    AddressFamily inet
    # Hostname 10.30.30.12
    IdentityFile ~/.ssh/id_rsa

    # SendEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES
    # SendEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT
    # SendEnv LC_IDENTIFICATION LC_ALL LANGUAGE
    # SendEnv XMODIFIERS

    ProxyCommand ssh gate2 nc 10.30.30.12 %p
    # ProxyCommand ssh jdfarin@tgate2.mhpcc.hpc.mil nc 10.40.40.116 %p

Host lift
    User git
    Hostname repo.lift
    # Hostname repo.lift.mhpcc.hpc.mil
    AddressFamily inet
    Port 7999
    ProxyJump jdfarin@login.lift.mhpcc.hpc.mil
    PubkeyAcceptedKeyTypes +ssh-rsa # <-- Uncomment this line if your version of SSH has deprecated using RSA keys for authentication
    IdentityFile ~/.ssh/id_rsa

Host pecoc-edu1 132.160.96.34
    HostName 132.160.96.34
    User jdfarin
    # force IPv4 because IPv6 is wonky at MHPCC
    AddressFamily inet
    IdentityFile ~/.ssh/id_rsa
    LocalForward 5901 127.0.0.1:5901
